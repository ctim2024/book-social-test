/* groovylint-disable CompileStatic, GStringExpressionWithinString, NoDef */
pipeline {
    agent { label 'agent1_laptop' }
    //agent any
    environment {
        VERSION = '1.0.2'
        DOCKERHUB_CREDENTIALS = credentials('boubaker1982-dockerhub')
    }
    tools {
        maven 'my_maven'
        jdk 'jdk.17'
    }
    stages {
        // stage('compile and test'){
        // parallel {
        stage('compile') {
            when {
                expression {
                    env.BRANCH_NAME == 'main' || '1' == '1'
                }
            }
            steps {
                echo 'compiling the application....'
                //sh 'env'  // display jenkins environment variables
                // echo "the version is : ${NEW_VERSION}"
                sh '''
              cd book-network
              mvn clean compile
              '''
            }
        
        }
        stage('unit-tests') {
            when {
                expression {
                    env.BRANCH_NAME == 'main' || '1' == '2'
                }
            }
            steps {
                echo 'testing the application....'
                sh 'mvn clean test'
            }
        }
      //  }
        // }
        stage('build') {
            when {
                expression {
                    env.BRANCH_NAME == 'main' || '1' == '1'
                }
            }
            steps {
                echo 'building the application....'
                sh '''
             cd book-network
             mvn clean package  -DskipTests
             '''
            }
        }
        stage('get project version') {
           
            steps {
                echo 'Building image for the application....'
                script {
                    // Capture the version from Maven command
                    def projectVersion = sh(
                      script: '''
                      cd book-network
                      mvn -Dexec.executable="echo" -Dexec.args="\\${project.version}" --non-recursive exec:exec
                      ''',
                      returnStdout: true
                  ).trim()
                    // Assign the captured version to the environment variable
                    env.VERSION = projectVersion
                    echo "Captured version: ${env.VERSION}"
                }
            }
        }

        stage('build and push image') {
          
            steps {
                echo 'build and push image......'
               script{
                withDockerRegistry(credentialsId:'boubaker1982-dockerhub'){

                sh '''
                cd book-network
                docker build -t $DOCKERHUB_CREDENTIALS_USR/bsn:${VERSION} -f ../docker/backend/Dockerfile .
                docker push $DOCKERHUB_CREDENTIALS_USR/bsn:${VERSION}
                '''

                }
               }
                
            }
        }
        stage('deploy') {
            steps {
                echo 'deploying the application....'
            }
        }
    }
    post {
        always {
            echo 'stages are done....'
            sh 'docker logout'
        }
        success {
            echo 'stages are done successfully....'
        }
        failure {
            echo 'there are a failure.....'
        }
    }
}
