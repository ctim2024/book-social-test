/* groovylint-disable CompileStatic, GStringExpressionWithinString, NoDef */
pipeline {
    //agent { label 'agent1' }
    agent any
    environment {
        VERSION = '1.0.2'
        DOCKERHUB_CREDENTIALS = credentials('boubaker1982-dockerhub')
    }
    tools {
        maven 'my_maven'
        jdk 'jdk.17'
    }
    stages {
        stage('compile') {
            agent { label 'agent1' }
            when {
                expression {
                    env.BRANCH_NAME == 'master' || '1' == '2'
                }
            }
            steps {
                echo 'compiling the application....'
                //sh 'env'  // display jenkins environment variables
                // echo "the version is : ${NEW_VERSION}"
                sh '''
              cd book-network
              mvn clean compile
              '''
            }
        }
        stage('unit-tests') {
            agent { label 'agent1' }
            when {
                expression {
                    env.BRANCH_NAME == 'master' || '1' == '2'
                }
            }
            steps {
                echo 'testing the application....'
                sh 'mvn clean test'
            }
        }
        stage('build') {
            agent { label 'agent1' }
            when {
                expression {
                    env.BRANCH_NAME == 'master' || '1' == '2'
                }
            }
            steps {
                echo 'building the application....'
                sh '''
             cd book-network
             mvn clean package  -DskipTests
             '''
            }
        }
        stage('get project version') {
            agent { label 'agent1' }
            steps {
                echo 'Building image for the application....'
                script {
                    // Capture the version from Maven command
                    def projectVersion = sh(
                      script: '''
                      cd book-network
                      mvn -Dexec.executable="echo" -Dexec.args="\\${project.version}" --non-recursive exec:exec
                      ''',
                      returnStdout: true
                  ).trim()
                    // Assign the captured version to the environment variable
                    env.VERSION = projectVersion
                    echo "Captured version: ${env.VERSION}"
                }
            }
        }

        stage('connect to docker hub') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                sh 'connect to dockerhub......'
            }
        }
        stage('deploy') {
            steps {
                echo 'deploying the application....'
            }
        }
    }
    post {
        always {
            echo 'stages are done....'
        }
        success {
            echo 'stages are done successfully....'
        }
        failure {
            echo 'there are a failure.....'
        }
    }
}
